
sensor_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000023d  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a2  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000b0b  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000006c  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000f88f  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005c  00000000  00000000  0001099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00003d13  00000000  00000000  00010a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	19 c0       	rjmp	.+50     	; 0xce <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <run_regular_pulse_test>:
#include "basic_functionality_tests.h"

void run_regular_pulse_test(const uint8_t count_to)
{
	while (1) {
		for (uint8_t pulse = 0; pulse < count_to; ++pulse) {
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	40 e0       	ldi	r20, 0x00	; 0
			PORTA = pulse;
  a2:	3f ef       	ldi	r19, 0xFF	; 255
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <run_regular_pulse_test+0x14>
#include "basic_functionality_tests.h"

void run_regular_pulse_test(const uint8_t count_to)
{
	while (1) {
		for (uint8_t pulse = 0; pulse < count_to; ++pulse) {
  a6:	24 2f       	mov	r18, r20
			PORTA = pulse;
  a8:	22 b9       	out	0x02, r18	; 2
  aa:	93 2f       	mov	r25, r19
  ac:	91 50       	subi	r25, 0x01	; 1
			for (uint8_t delay_cnt = 1; delay_cnt != 0; ++delay_cnt) { }
  ae:	f1 f7       	brne	.-4      	; 0xac <run_regular_pulse_test+0xe>
#include "basic_functionality_tests.h"

void run_regular_pulse_test(const uint8_t count_to)
{
	while (1) {
		for (uint8_t pulse = 0; pulse < count_to; ++pulse) {
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	28 17       	cp	r18, r24
  b4:	c8 f3       	brcs	.-14     	; 0xa8 <run_regular_pulse_test+0xa>
  b6:	81 11       	cpse	r24, r1
  b8:	f6 cf       	rjmp	.-20     	; 0xa6 <run_regular_pulse_test+0x8>
  ba:	ff cf       	rjmp	.-2      	; 0xba <run_regular_pulse_test+0x1c>

000000bc <board_init>:
#include <conf_board.h>

static void basic_io_test_init(void)
{
	// Initiera io-portar.
	DDRA = 0x00; // Alla pinnar på A är input.
  bc:	11 b8       	out	0x01, r1	; 1
	__asm__ __volatile__ ("nop");
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
  c2:	fc df       	rcall	.-8      	; 0xbc <board_init>
	run_regular_pulse_test(255);
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	eb df       	rcall	.-42     	; 0x9e <run_regular_pulse_test>

	// Insert application code here, after the board has been initialized.
}
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
