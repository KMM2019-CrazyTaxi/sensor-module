
sensor_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000353  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000290  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000bdf  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000008c  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000f90c  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000007a  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000088  00000000  00000000  00010e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00002cd4  00000000  00000000  00010e9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3d d0       	rcall	.+122    	; 0x13e <main>
  c4:	42 c0       	rjmp	.+132    	; 0x14a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_wait_for_ack>:
#include "basic_functionality_tests.h"

void run_regular_pulse_test(const uint8_t count_to)
{
	while (1) {
		for (uint8_t pulse = 0; pulse < count_to; ++pulse) {
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	82 b9       	out	0x02, r24	; 2
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <i2c_wait_for_ack+0x8>
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	82 b9       	out	0x02, r24	; 2
  da:	08 95       	ret

000000dc <i2c_transmit_test>:
	TWCR = (1 << TWINT) | (1 << TWEN);
	i2c_wait_for_ack();
}

void i2c_transmit_test(const uint8_t data)
{
  dc:	a8 2e       	mov	r10, r24
	PORTA = 4;
}

static void i2c_send_start_bit(void)
{
	PORTA = 1;
  de:	bb 24       	eor	r11, r11
  e0:	b3 94       	inc	r11
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  e2:	cc eb       	ldi	r28, 0xBC	; 188
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	0f 2e       	mov	r0, r31
  e8:	f4 ea       	ldi	r31, 0xA4	; 164
  ea:	cf 2e       	mov	r12, r31
  ec:	f0 2d       	mov	r31, r0
	PORTA = 2;
  ee:	68 94       	set
  f0:	dd 24       	eor	r13, r13
  f2:	d1 f8       	bld	r13, 1
	i2c_wait_for_ack();
}

static void i2c_send_data(const uint8_t data)
{
	TWDR = data;
  f4:	0b eb       	ldi	r16, 0xBB	; 187
  f6:	10 e0       	ldi	r17, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN);
  f8:	0f 2e       	mov	r0, r31
  fa:	f4 e8       	ldi	r31, 0x84	; 132
  fc:	ef 2e       	mov	r14, r31
  fe:	f0 2d       	mov	r31, r0
	i2c_wait_for_ack();
}

static void i2c_send_stop_bit(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 100:	0f 2e       	mov	r0, r31
 102:	f4 e9       	ldi	r31, 0x94	; 148
 104:	ff 2e       	mov	r15, r31
 106:	f0 2d       	mov	r31, r0
	PORTA = 4;
}

static void i2c_send_start_bit(void)
{
	PORTA = 1;
 108:	b2 b8       	out	0x02, r11	; 2
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 10a:	c8 82       	st	Y, r12
	PORTA = 2;
 10c:	d2 b8       	out	0x02, r13	; 2
	i2c_wait_for_ack();
 10e:	dc df       	rcall	.-72     	; 0xc8 <i2c_wait_for_ack>
	i2c_wait_for_ack();
}

static void i2c_send_data(const uint8_t data)
{
	TWDR = data;
 110:	f8 01       	movw	r30, r16
 112:	a0 82       	st	Z, r10
	TWCR = (1 << TWINT) | (1 << TWEN);
 114:	e8 82       	st	Y, r14
	i2c_wait_for_ack();
 116:	d8 df       	rcall	.-80     	; 0xc8 <i2c_wait_for_ack>
	i2c_wait_for_ack();
}

static void i2c_send_stop_bit(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 118:	f8 82       	st	Y, r15
	i2c_wait_for_ack();
 11a:	d6 df       	rcall	.-84     	; 0xc8 <i2c_wait_for_ack>
 11c:	f5 cf       	rjmp	.-22     	; 0x108 <i2c_transmit_test+0x2c>

0000011e <board_init>:
}

static void i2c_init(void)
{
	// Sätt på ström till TWI-krets.
	PRR0 = PRR0 & ~(1 << PRTWI);
 11e:	e4 e6       	ldi	r30, 0x64	; 100
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	80 83       	st	Z, r24
	
	// Konfigurera SCL-frekvens.
	TWSR = 0x00; // Prescaler 1 ger grund på 1 MHz, så möjliga klockfrekvenser 3.9 - 1000 KHz (400 KHz max enl. protokoll).
 128:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 50; // Ger SCL-frekvens 10 KHz.
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	80 93 b8 00 	sts	0x00B8, r24
	unsigned char twcr_value = 0;
	twcr_value |= (1 << TWINT); // Set the interrupt bit, indicating that i2c should not start transmitting.
	twcr_value |= (0 << TWIE); // Don't use interrupt for I2C transmissions.
	twcr_value |= (1 << TWEA); // Enable ACK when data received.
	//twcr_value |= (1 << TWEN); // Enable I2C circuit.
	TWCR = twcr_value;	
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	80 93 bc 00 	sts	0x00BC, r24
#include <conf_board.h>

static void basic_io_test_init(void)
{
	// Initiera io-portar.
	DDRA = 0x00; // Alla pinnar på A är input.
 138:	11 b8       	out	0x01, r1	; 1
	__asm__ __volatile__ ("nop");
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
 13e:	ef df       	rcall	.-34     	; 0x11e <board_init>
	//run_regular_pulse_test(255);
	i2c_transmit_test(0xBE);
 140:	8e eb       	ldi	r24, 0xBE	; 190
 142:	cc df       	rcall	.-104    	; 0xdc <i2c_transmit_test>

	// Insert application code here, after the board has been initialized.
}
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
